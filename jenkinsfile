pipeline{
  agent any

  environment {
      registryCredentials = "nexus"
      registry = "172.17.0.3:8083"
      imageName = "nodemongoapp"
      imageTag = "6.0-SNAPSHOT-${env.BUILD_NUMBER}"
      // Define credential variables for direct access
      NEXUS_CREDENTIALS = credentials('nexus')
  }

  stages {
    stage('Checkout Code') {
        steps {
            script {
                git branch: 'main', url: 'https://github.com/marwaniiwael18/nodeProject'
                sh 'ls -l'
            }
        }
    }
    
    stage('Install dependencies') {
      steps {
        script {
          sh('npm install')
        }
      }
    }

    stage('Unit Test') {
      steps {
        script {
          sh('npm test')
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        script {  
          def scannerHome = tool 'scanner'
          withSonarQubeEnv {
            sh "${scannerHome}/bin/sonar-scanner"
          }
        } 
      }  
    }

    stage('Build application') {
      steps {
        script {
          sh('npm run build-dev')
        }
      }
    }

    stage('Building images (node and mongo)') {
      steps {
        script {
          sh 'ls -l'
          sh "docker build -t $registry/$imageName:$imageTag ."
        }
      }
    }

    stage('Deploy to Nexus') {
      steps {
        script {
          // Direct login approach to avoid timeout issues
          sh "echo '${NEXUS_CREDENTIALS_PSW}' | docker login http://$registry -u ${NEXUS_CREDENTIALS_USR} --password-stdin"
          
          // Push the image
          sh "docker push $registry/$imageName:$imageTag"
          
          // Logout when done
          sh "docker logout http://$registry"
        }
      }
    }

    stage('Run Application') {
      steps {
        script {
          // Direct login approach
          sh "echo '${NEXUS_CREDENTIALS_PSW}' | docker login http://$registry -u ${NEXUS_CREDENTIALS_USR} --password-stdin"
          
          // Pull the image
          sh "docker pull $registry/$imageName:$imageTag"

          // Update docker-compose file
          sh "sed -i 's|IMAGE_TAG|$imageTag|g' docker-compose.yml"
          sh "cat docker-compose.yml"

          // Restart application
          sh "docker-compose down || true"
          sh "docker-compose up -d"
          
          // Logout when done
          sh "docker logout http://$registry"
        }
      }
    }

    stage("Run prometheus") {
      steps {
        script {
          sh 'docker start prometheus || docker run -d --name prometheus prom/prometheus'
        }
      }
    }
    
    stage("Run grafana") {
      steps {
        script {
          sh 'docker start grafana || docker run -d --name grafana grafana/grafana'
        }
      }
    }
  }
}